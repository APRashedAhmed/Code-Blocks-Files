#include <iostream>
#include <iomanip>
#include <math.h>
//#include <lapacke.h>

using namespace std;

const int N = 16;

void MultMat(double A[N][N], double B[N][N], double AB[N][N])
{

    for(int i=0; i<N; i++)
        for(int j=0; j<N; j++)
        {
            AB[i][j] = 0;

            for(int k=0; k<N; k++)
                    AB[i][j]=AB[i][j]+A[i][k]*B[k][j];
        }
}

void PrintMat(double A[N][N])
{
    //Prints any nxn matrix

    cout << endl;

    for(int i=0; i<N; i++)
    {
        cout << setw(2) << "|" << setw(4);

        for(int j=0; j<N; j++)
        {
            cout << A[i][j];

            if(j!=N-1)
                cout << setw(4);
        }
        cout  << " |" << endl;
    }
    cout << endl;
}

void InitMatP1(double A[N][N])
{
    for(int i = 0; i<N; i++)
        for(int j = 0; j<N; j++)
        {
            if(i==j)
                A[i][j] = 2;

            else if(j==i+1)
                A[i][j] = -1;

            else if(j==i-1)
                A[i][j] = -1;

            else
                A[i][j] = 0;
        }

    A[0][N-1] = -1;
    A[N-1][0] = -1;
}

void InitMatP2(double A[N][N])
{
    for(int i = 0; i<N; i++)
        for(int j = 0; j<N; j++)
        {
            if(i%2 != 0)
            {
                if(i==j)
                    A[i][j] = 200;

                else if(j==i+1)
                    A[i][j] = -1;

                else if(j==i-1)
                    A[i][j] = -1;

                else
                    A[i][j] = 0;
            }

            else
            {
                if(i==j)
                    A[i][j] = 2;

                else if(j==i+1)
                    A[i][j] = -100;

                else if(j==i-1)
                    A[i][j] = -100;

                else
                    A[i][j] = 0;

            }
        }

    A[0][N-1] = -100;
    A[N-1][0] = -1;
}

void InitMatP3(double A[N][N])
{
    for(int i = 0; i<N; i++)
        for(int j = 0; j<N; j++)
        {
            if(i%2 != 0)
            {
                if(i==j)
                    A[i][j] = 2000;

                else if(j==i+1)
                    A[i][j] = -1;

                else if(j==i-1)
                    A[i][j] = -1;

                else
                    A[i][j] = 0;
            }

            else
            {
                if(i==j)
                    A[i][j] = 2;

                else if(j==i+1)
                    A[i][j] = -1000;

                else if(j==i-1)
                    A[i][j] = -1000;

                else
                    A[i][j] = 0;

            }
        }

    A[0][N-1] = -1000;
    A[N-1][0] = -1;
}

void InitMatP4(double A[N][N])
{
    for(int i = 0; i<N; i++)
        for(int j = 0; j<N; j++)
        {
            if(i==j)
                A[i][j] = 2;

            else if(j==i+1)
                A[i][j] = -1;

            else if(j==i-1)
                A[i][j] = -1;

            else
                A[i][j] = 0;
        }

    A[0][N-1] = -1;
    A[N-1][0] = -1;
    A[1][1] = 2000;
    A[0][1] = -1000;
    A[2][1] = -1000;
}

int main()
{
    double A[N][N];
    double B[N][N];
    
    int inp;
    
    cout << "What part? Input 1, 2, 3, or 4: \n";
    cin >> inp;
    
    if(inp == 1)
        InitMatP1;
    else if(inp == 2)
        InitMatP2;
    else if(inp == 3)
        InitMatP3;
    else
        InitMatP4;

    MultiplyMatrix(A, A, B);

    double v[N];
    double w[4*N];
    
    char job = 'N'; 
    char upl = 'U';
    
    int nn = N;
    int lw = 4 * N;
    int flg = 99;
    
    LAPACK_dsyev(&j, &upl, &nn, B[0], &nn, v, wo, &lw, &flg);

    for (int i=0; i<N; i++)
    {
        cout << v[i] << endl;
    }
}
